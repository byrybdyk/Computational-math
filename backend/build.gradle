
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.hidetake.ssh' version '2.11.2'
    
}

import org.hidetake.gradle.ssh.*

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation('junit:junit:4.13.1')
    implementation 'org.apache.xmlbeans:xmlbeans:5.1.0'
}



tasks.named('test') {
    useJUnitPlatform()
}
task playMusic {
    doLast {
        String audioFilePath = 'C:\\sound.mp3'

        exec {
            commandLine 'cmd', '/c', audioFilePath
        }
    }
}

build.finalizedBy(playMusic)

task validateXmlFiles {
    doLast {
        FileTree xmlFiles = fileTree(dir: 'src/main/resources', include: '**/*.xml')

        xmlFiles.each { xmlFile ->
            try {
                def xml = new XmlParser().parse(xmlFile)
                println "File ${xmlFile.name} is valid XML."
            } catch (Exception e) {
                throw new GradleException("Validation failed for file ${xmlFile.name}: ${e.message}", e)
            }
        }
    }
}

// task convertToNative2Ascii {
//     inputs.files fileTree('src/main/resources') // Входные файлы
//     outputs.dir 'src/main/resources-ascii' // Выходная директория

//     doLast {
//         def srcDir = 'src/main/resources'
//         def destDir = 'src/main/resources-ascii'

//         // Создаем выходную директорию, если ее нет
//         // destDir.mkdirs()

//         // Получаем список всех файлов в исходной директории
//         fileTree(srcDir).each { file ->
//             // Имя файла без расширения
//             def fileName = file.name.replaceAll(/\.xml$/, '.properties')

//             // Преобразуем файл в формат native2ascii
//             def asciiFile = new File("${destDir}/${fileName}")
//             asciiFile.withWriter { writer ->
//                 file.eachLine { line ->
//                     writer.write(line.getBytes('ISO-8859-1').encodeHex().toString() + '\n')
//                 }
//             }
//         }
//     }
// }

// // Добавляем задачу convertToNative2Ascii в цепочку сборки (build) и компиляции (compileJava)
// compileJava.dependsOn convertToNative2Ascii
// build.dependsOn convertToNative2Ascii






ssh.settings {
    identity = new File('C:\\users\\byrybdyk\\.ssh\\id_rsa')
}

remotes {
    webServer {
        host = '5.42.73.110'
        user = 'byrybdyk'
    }
}
//
task deployJar {
    doLast {
        ssh.run {
            session(remotes.webServer) {
                // Execute a command
//                def result = execute 'sudo service status'

                // Any Gradle methods or properties are available in a session closure
                copy {
                    from "D:\\GIT\\Computational-math\\WebMathbuild\\libs\\WebMath-0.0.1-SNAPSHOT.jar"
                    into "/home/byrybdyk/deploy"
                }

                put from: 'D:\\GIT\\Computational-math\\WebMath\\build\\libs\\WebMath-0.0.1-SNAPSHOT.jar', into:'/home/byrybdyk/deploy'
                // Also Groovy methods or properties are available in a session closure
            }
        }
    }
}
